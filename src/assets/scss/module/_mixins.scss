@use 'variables' as *;
@use 'sass:math';
// ------------------------------------------------------------
// mixins
// ------------------------------------------------------------

// Media queries
// ------------------------------------------------------------
@mixin mqMin($min){
  $min: math.div($min, 1);
  @media screen and (min-width: #{$min+1}px){
    @content;
  }
}

@mixin mqMax($max){
  $max: math.div($max, 1);
  @media screen and (max-width: #{$max}px){
    @content;
  }
}

@mixin mqMinMax($min, $max){
  $min: #{math.div($min, 1)+1}px;
  $max: #{math.div($max, 1)}px;
  @media screen and (min-width: $min) and (max-width: $max){
    @content;
  }
}

// Fluid image
// ------------------------------------------------------------
@mixin fluidImage() {
  display: block;
  width: 100%;
  height: auto;
  vertical-align: top;
}

// Border radius
//-----------------------------------
@mixin border-radius($radius) {
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -webkit-border-radius: $radius;
  border-radius: $radius;
}

// Element Transform
//-----------------------------------
@mixin transform($deg) {
  -ms-transform: rotate($deg);
  -moz-transform: rotate($deg);
  -webkit-transform: rotate($deg);
  transform: rotate($deg);
}

// Element Transition
//-----------------------------------
@mixin transition {
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  transition: all 0.3s;
}

@mixin image-100 {
  display: block;
  width: 100%;
  margin: 0 auto;
  height: auto;
}

@mixin hide-text{
  font-size: 0;
  overflow: hidden;
  text-indent: 100%;
  color: transparent;
}

// media screen --- Use min-screen, limited usage max-screen
//-----------------------------------
@mixin min-screen($min) {
  @media (min-width: $min) {
    @content;
  }
}

@mixin max-screen($max) {
  @media (max-width: $max) {
    @content;
  }
}

@mixin min-max($min, $max) {
  @media (min-width: $min) and (max-width: $max) {
    @content;
  }
}


@function calc-percent($a, $b) {
  @return calc(#{math.div($a, $b)} * 100%);
}


@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: math.div($responsive, ($responsive - $responsive + 1));
  $dimension: if(math.unit($responsive) and math.unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: math.div($min, $responsive-unitless) * 100;

  @if $fallback {
    & {
      font-size: $fallback;
    }
  }

  & {
    font-size: clamp($min, $responsive, $max); // Giới hạn kích thước font
  }

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: math.div($max, $responsive-unitless) * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}px) {
      font-size: $max;
    }
  }
}


@function get-vw($target) {
  $vw-context: math.div(1300 * 0.01, 1) * 1px;
  @return math.div($target, $vw-context) * 1vw;
}

@function get-vw-sp($target) {
  $vw-context: math.div(650 * 0.01, 1) * 1px;
  @return math.div($target, $vw-context) * 1vw;
}

@function get-vw-hack($width, $size) {
  $vw-context: math.div($width, 100);
  @return math.div($size, $vw-context) * 1vw;
}

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin font-smoothing-none {
  -webkit-font-smoothing: auto;
  -moz-osx-font-smoothing: auto;
}

@mixin transition($transitions...) {
  -webkit-transition: $transitions;
  -moz-transition: $transitions;
  -ms-transition: $transitions;
  -o-transition: $transitions;
  transition: $transitions;
}

@mixin transitionDelay($delay) {
  -webkit-transition-delay: $delay;
  -moz-transition-delay: $delay;
  -o-transition-delay: $delay;
  transition-delay: $delay;
}

@mixin transitionDuration($durations) {
  -webkit-transition-duration: $durations;
  -moz-transition-duration: $durations;
  -o-transition-duration: $durations;
  transition-duration: $durations;
}

@mixin transitionProperty($property) {
  -webkit-transition-property: $property;
  -moz-transition-property: $property;
  -o-transition-property: $property;
  transition-property: $property;
}

@mixin transitionTimingFunction($values) {
  -webkit-transition-timing-function: $values;
  -moz-transition-timing-function: $values;
  -o-transition-timing-function: $values;
  transition-timing-function: $values;
}

/* this mixin makes possible to add transition to a specific vendor, example: */
/* -webkit-transition: -webkit-transform 0.5s linear; */
@mixin transitionPrefix($property, $values) {
  -webkit-transition: -webkit-#{$property} #{$values};
  -moz-transition: -moz-#{$property} #{$values};
  -ms-transition: -ms-#{$property} #{$values};
  -o-transition: -o-#{$property} #{$values};
  transition: #{$property} #{$values};
}

@mixin background-gradient($from, $to) {
  background: -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, $from), color-stop(100%,  $to));
  background: -webkit-linear-gradient($from, $to);
  background: -moz-linear-gradient($from, $to);
  background: -o-linear-gradient($from, $to);
  background: linear-gradient($from, $to);
}

@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

@mixin transformOrigin($transformOrigins) {
  -moz-transform-origin: $transformOrigins;
  -o-transform-origin: $transformOrigins;
  -ms-transform-origin: $transformOrigins;
  -webkit-transform-origin: $transformOrigins;
  transform-origin: $transformOrigins;
}

@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}
}

@mixin animation($animations) {
  -webkit-animation: $animations;
  -moz-animation: $animations;
  -o-animation: $animations;
  -ms-animation: $animations;
  animation: $animations;
}

@mixin animationDuration($value) {
  -webkit-animation-duration: $value;
  -moz-animation-duration: $value;
  -o-animation-duration: $value;
  -ms-animation-duration: $value;
  animation-duration: $value;
}

@mixin animationDelay($value) {
  -webkit-animation-delay: $value;
  -moz-animation-delay: $value;
  -o-animation-delay: $value;
  -ms-animation-delay: $value;
  animation-delay: $value;
}

@mixin animationTimingFunction($value) {
  -webkit-animation-timing-function: $value;
  -moz-animation-timing-function: $value;
  -o-animation-timing-function: $value;
  -ms-animation-timing-function: $value;
  animation-timing-function: $value;
}

@mixin keyFrame($name) {
  @-webkit-keyframes #{$name}{
    @content
  }
  @-moz-keyframes #{$name}{
    @content
  }
  @-o-keyframes #{$name}{
    @content
  }
  @keyframes #{$name}{
    @content
  }
}

@mixin text-shadow{
  text-shadow: 0px 4px 3px #2B2B2B;
}
